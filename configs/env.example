#############################################
# 服务器 Server
#############################################
# 后端监听端口
PORT=8080

#############################################
# 数据库 PostgreSQL
# - Docker Compose 下：host= db
# - 本机直跑：host= localhost
#############################################
DB_HOST=db
DB_PORT=5432
DB_USER=postgres
DB_PASSWORD=mysecretpassword
DB_NAME=backend
# 生产环境通常为 require；本地/容器默认 disable
DB_SSLMODE=disable

# 仅供 docker-compose 的 postgres 容器初始化使用（应用自身不会读取这三项）
POSTGRES_USER=postgres
POSTGRES_PASSWORD=mysecretpassword
POSTGRES_DB=backend

#############################################
# Redis
# - Docker Compose 下：host= redis
# - 本机直跑：host= localhost
# 注意：在 docker-compose.multi-local.yml 中，REDIS_PASSWORD 不能为空
#############################################
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=myredispassword
REDIS_DB=0

#############################################
# SMTP 邮件服务
# - 若不发送邮件，可保留占位或改为无效配置
# - 端口常见：587(TLS) / 465(SSL)
#############################################
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your-email@example.com
SMTP_PASSWORD=your-email-password
SMTP_FROM=your-email@example.com

#############################################
# 安全/风控 Security
#############################################
# 单个IP每日最大尝试次数（用于注册/验证码等风控）
MAX_IP_REQUESTS_PER_DAY=10

# 强烈建议使用高熵随机字符串：
# 可用 `openssl rand -base64 48` 或在线生成随机密钥
JWT_SECRET=please-change-to-a-strong-random-secret

# Token 过期时间
JWT_ACCESS_TOKEN_EXPIRES_IN_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRES_IN_DAYS=7

#############################################
# 文件存储 File Storage
# 应用支持多套存储（本地/S3），并通过名字引用。
# Default 指向一个在 Local 或 S3 中实际存在的存储名。
#############################################
# 默认存储（本地多存储示例中建议为 docs；S3 多存储示例中建议为 primary）
FILE_STORAGE_DEFAULT=docs

# 本地存储（支持多个），以逗号分隔声明名称清单
# 下面示例提供 docs 与 avatars 两个本地存储
FILE_STORAGE_LOCAL_NAMES=docs,avatars

# 每个本地存储都可（可选）指定路径与访问URL
# 未设置时，程序会使用:
#   BasePath: ./uploads/<name>
#   BaseURL : http://localhost:8080/uploads/<name>
# 如使用 docker-compose.multi-local.yml，已将宿主机 ./uploads/docs 和 ./uploads/avatars
# 挂载进容器 /app/uploads/docs 与 /app/uploads/avatars，对应默认路径即可直接访问。
# （按需取消注释并修改）

# FILE_STORAGE_LOCAL_DOCS_PATH=./uploads/docs
# FILE_STORAGE_LOCAL_DOCS_URL=http://localhost:8080/uploads/docs
# FILE_STORAGE_LOCAL_AVATARS_PATH=./uploads/avatars
# FILE_STORAGE_LOCAL_AVATARS_URL=http://localhost:8080/uploads/avatars

# S3 存储（支持多个），以逗号分隔声明名称清单。
# 若暂不使用 S3，留空或删除本节即可。
# 示例包含 primary 与 backups 两套配置占位。
FILE_STORAGE_S3_NAMES=

# Primary S3（示例）
FILE_STORAGE_S3_PRIMARY_REGION=us-east-1
FILE_STORAGE_S3_PRIMARY_BUCKET=
FILE_STORAGE_S3_PRIMARY_ACCESS_KEY=
FILE_STORAGE_S3_PRIMARY_SECRET_KEY=
# 兼容 MinIO 或第三方S3时可填（形如 http://minio:9000）；AWS S3 可留空
FILE_STORAGE_S3_PRIMARY_ENDPOINT=
# 自定义访问基础URL（CDN/反向代理域名）。留空则由程序按桶/区域推断或返回S3签名URL
FILE_STORAGE_S3_PRIMARY_BASE_URL=

# Backups S3（示例）
FILE_STORAGE_S3_BACKUPS_REGION=eu-west-1
FILE_STORAGE_S3_BACKUPS_BUCKET=
FILE_STORAGE_S3_BACKUPS_ACCESS_KEY=
FILE_STORAGE_S3_BACKUPS_SECRET_KEY=
FILE_STORAGE_S3_BACKUPS_ENDPOINT=
FILE_STORAGE_S3_BACKUPS_BASE_URL=